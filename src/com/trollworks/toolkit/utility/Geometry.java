/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is com.trollworks.toolkit.
 *
 * The Initial Developer of the Original Code is Richard A. Wilkes.
 * Portions created by the Initial Developer are Copyright (C) 1998-2014,
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * ***** END LICENSE BLOCK ***** */

package com.trollworks.toolkit.utility;

import java.awt.Point;
import java.awt.Rectangle;

/** Provides geometry-related utilities. */
public class Geometry {
	/**
	 * @param pt The {@link Point} to generate a string for.
	 * @return The string form.
	 */
	@SuppressWarnings("nls")
	public static final String toString(Point pt) {
		return pt.x + "," + pt.y;
	}

	/**
	 * @param encoded A string previously generated by {@link #toString(Point)}.
	 * @return A {@link Point} with the encoded string's contents.
	 */
	@SuppressWarnings("nls")
	public static final Point toPoint(String encoded) throws NumberFormatException {
		if (encoded == null) {
			throw new NumberFormatException("Not a point");
		}
		String[] parts = encoded.split(",", 2);
		if (parts.length != 2) {
			throw new NumberFormatException("Not a point");
		}
		return new Point(Integer.parseInt(parts[0].trim()), Integer.parseInt(parts[1].trim()));
	}

	/**
	 * @param rect The {@link Rectangle} to generate a string for.
	 * @return The string form.
	 */
	@SuppressWarnings("nls")
	public static final String toString(Rectangle rect) {
		if (rect.width != 1 || rect.height != 1) {
			return rect.x + "," + rect.y + "," + rect.width + "," + rect.height;
		}
		return rect.x + "," + rect.y;
	}

	/**
	 * @param encoded A string previously generated by {@link #toString(Rectangle)}.
	 * @return A {@link Rectangle} with the encoded string's contents.
	 */
	@SuppressWarnings("nls")
	public static final Rectangle toRectangle(String encoded) throws NumberFormatException {
		if (encoded == null) {
			throw new NumberFormatException("Not a rectangle");
		}
		String[] parts = encoded.split(",", 4);
		if (parts.length != 2 && parts.length != 4) {
			throw new NumberFormatException("Not a rectangle");
		}
		return new Rectangle(Integer.parseInt(parts[0].trim()), Integer.parseInt(parts[1].trim()), parts.length > 2 ? Integer.parseInt(parts[2].trim()) : 1, parts.length > 2 ? Integer.parseInt(parts[3].trim()) : 1);
	}
}
